(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{462:function(t,r,o){t.exports=o.p+"assets/img/git.bc8eae37.jpg"},494:function(t,r,o){"use strict";o.r(r);var i=o(2),v=Object(i.a)({},(function(){var t=this,r=t.$createElement,i=t._self._c||r;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"什么是git"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是git"}},[t._v("#")]),t._v(" 什么是Git?")]),t._v(" "),i("p",[t._v("Git是一个版本管理控制系统，是目前主流的代码版本管理和分支管理工具")]),t._v(" "),i("p",[i("b",[t._v("git工作流程 :")])]),t._v(" "),i("img",{attrs:{src:o(462)}}),t._v(" "),i("ul",[i("li",[i("font",{attrs:{color:"FireBrick"}},[t._v("工作区( workspace ) :")]),t._v("  自己工作的区域， 本地工作的目录， 开发者在这进程增删改的操作")],1),t._v(" "),i("li",[i("font",{attrs:{color:"FireBrick"}},[t._v("暂存区( staging Area ) :")]),t._v(" 又叫索引区 index ， 临时保存工作区上的改动，通过git add操作将工作区的修改同步到暂存区")],1),t._v(" "),i("li",[i("font",{attrs:{color:"FireBrick"}},[t._v("本地仓库( local repository ) :")]),t._v('  执行git commit -m "xxx" 时， 会把暂存区的暂存的内容提交到本地仓库中')],1),t._v(" "),i("li",[i("font",{attrs:{color:"FireBrick"}},[t._v("远程仓库( remote repository ) :")]),t._v("  远程保存代码的仓库，如github上的仓库， 执行git push会把本地仓库的内容推到远程仓库， 当然， git pull会把远程仓库的内容同步到本地仓库和工作区， 在工作区就可以看到远程仓库上最新的代码")],1)]),t._v(" "),i("p",[i("b",[t._v("整体工作流程为 ：")]),t._v("  工作区--–add–--\x3e暂存区–--commit–--\x3e本地仓库–--push–--\x3e远程仓库")]),t._v(" "),i("br"),t._v(" "),i("h2",{attrs:{id:"git常用命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" Git常用命令")]),t._v(" "),i("p",[t._v("下载Git后， 先"),i("b",[t._v("全局配置Git用户名和邮箱")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(' git config --global  user.name     "用户名"')]),i("br"),t._v(" "),i("font",{attrs:{color:"FireBrick"}},[t._v(' git config --global  user.email    "你的邮箱"')])],1)]),t._v(" "),i("p",[i("b",[t._v("查看Git用户名和邮箱")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git config --global  user.name ")]),i("br"),t._v(" "),i("font",{attrs:{color:"FireBrick"}},[t._v(" git config --global  user.email ")])],1)]),t._v(" "),i("p",[i("b",[t._v("初始化一个文件夹为一个git仓库")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git init")])],1)]),t._v(" "),i("p",[i("b",[t._v("克隆远程仓库代码")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git clone [url]")])],1)]),t._v(" "),i("p",[i("b",[t._v("查看当前分支")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git branch")])],1)]),t._v(" "),i("p",[i("b",[t._v("查看本地所有分支")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git branch -a")])],1)]),t._v(" "),i("p",[i("b",[t._v("查看远程仓库所有分支")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git branch -r")]),t._v("     //注：远程刚新建的分支需要先git pull 才能使用此命令查看到远程所有分支")],1)]),t._v(" "),i("p",[i("b",[t._v("查看当前分支以及文件状态")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git status")])],1)]),t._v(" "),i("p",[i("b",[t._v("本地新建一个分支")]),t._v(" 如 dev")]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git branch dev")])],1)]),t._v(" "),i("p",[i("b",[t._v("切换分支")]),t._v(" 如dev")]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git checkout dev")])],1)]),t._v(" "),i("p",[i("b",[t._v("本地新建一个分支并切换到这个新建分支上")]),t._v(" 如：dev")]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git checkout -b dev")])],1)]),t._v(" "),i("p",[t._v("项目的远程仓库代码克隆到本地之后，"),i("b",[t._v("本地新建一个分支并切换到这个新建分支上，并与远程的某个分支关联")]),t._v(" 如：本地新建dev并与远程dev分支关联")]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git checkout -b dev origin/dev")])],1)]),t._v(" "),i("p",[i("b",[t._v("拉取远程仓库最新的代码")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git pull")])],1)]),t._v(" "),i("p",[i("b",[t._v("将本地仓库的代码推到远程仓库")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git push")])],1)]),t._v(" "),i("p",[i("b",[t._v("查看提交commit记录")])]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git log")]),t._v("    查看提交记录"),i("br"),t._v(" "),i("font",{attrs:{color:"FireBrick"}},[t._v(" git log -p")]),t._v("    查看提交的详细更改"),i("br"),t._v(" "),i("font",{attrs:{color:"FireBrick"}},[t._v(" git log -p [commit id]")]),t._v("    查看某次提交的详细更改"),i("br"),t._v(" "),i("font",{attrs:{color:"FireBrick"}},[t._v(" git log --author=Git用户名")]),t._v("    查看某个成员的提交记录")],1)]),t._v(" "),i("p",[i("b",[t._v("合并某个分支( 如：feature-1.3.1 )到当前分支")]),t._v("，在当前分支执行")]),t._v(" "),i("blockquote",[i("p",[i("font",{attrs:{color:"FireBrick"}},[t._v(" git merge feature-1.3.1")])],1)]),t._v(" "),i("br"),t._v(" "),i("br"),t._v(" "),i("h2",{attrs:{id:"git在其他场景的使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git在其他场景的使用"}},[t._v("#")]),t._v(" Git在其他场景的使用")]),t._v(" "),i("p",[i("b",[t._v("一、转移代码 ===>  在 branchA 分支上工作， 工作区修改了代码还没有提交到远程仓库， 现在要将这些修改转移到 branchB 分支上")])]),t._v(" "),i("blockquote",[i("ol",[i("li",[t._v("在 branchA 分支上暂存 ： "),i("font",{attrs:{color:"FireBrick"}},[t._v(" git stash ")])],1),t._v(" "),i("li",[t._v("切换到 branchB 分支 :       "),i("font",{attrs:{color:"FireBrick"}},[t._v("  git checkout branchB")])],1),t._v(" "),i("li",[t._v("在 branchB 分支释放暂存：  "),i("font",{attrs:{color:"FireBrick"}},[t._v("git stash pop")]),t._v("       //这样就将代码转移到branchB分支的本地工作区了，且并未提交。")],1)])]),t._v(" "),i("br"),t._v(" "),i("p",[i("b",[t._v("二、切换分支解决 bug ===> 在branchA分支上修改了一些东西且暂时不想提交到远程， 临时需要切换到另一个分支 branchB 上解决bug")])]),t._v(" "),i("blockquote",[i("ol",[i("li",[t._v("在 branchA 分支上将修改的代码暂存起来 ： "),i("font",{attrs:{color:"FireBrick"}},[t._v(" git stash ")])],1),t._v(" "),i("li",[t._v("切换到 branchB 分支上解决 bug :       "),i("font",{attrs:{color:"FireBrick"}},[t._v("  git checkout branchB")]),t._v("    //  解决bug之后提交远程仓库")],1),t._v(" "),i("li",[t._v("切回 branchA 分支， 在当前分支释放之前暂存在栈内的代码：  "),i("font",{attrs:{color:"FireBrick"}},[t._v("git stash pop")])],1)])]),t._v(" "),i("br"),t._v(" "),i("p",[i("b",[t._v("三、查看一段时间内自己在项目中新增的代码行数")]),i("br"),t._v("\n--since: 开始时间        --until: 结束时间           --author: git 用户名")]),t._v(" "),i("blockquote",[i("p",[t._v("git log --since=2022-03-18 --until=2022-03-28 --author='xxx' --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }'")])])])}),[],!1,null,null,null);r.default=v.exports}}]);